name: build
on:
  pull_request:
    branches:
      - main
  push:
    tags:
      - "v*.*.*"
    branches:
      - "dev*"
      - "main"
  schedule:
    - cron: "0 0 * * 1"

env:
  DOCKERHUB_REGISTRY: shipasoftware/ketch
  ECR_REGISTRY: public.ecr.aws/i0l8a6m7/ketch-controller

jobs:
  build-single-platform:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.login-ecr.outputs.registry }}
          username: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          push: ${{ github.event_name != 'schedule' }}
          tags: |
            ${{ env.ECR_REGISTRY }}:${{ github.sha }}
            ${{ env.DOCKERHUB_REGISTRY }}:${{ github.sha }}
          build-args: |
            github_user=${{ secrets.SHIPA_GITHUB_USERNAME }}
            github_token=${{ secrets.SHIPA_GITHUB_TOKEN }}
            release_version=${{ github.head_ref }}
            git_commit=${{ github.sha }}
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.SHIPA_GITHUB_TOKEN }}


  build-multiplatform:
    if: ${{ (github.ref == 'refs/heads/main') && (github.event_name != 'schedule') && true }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          # - linux/riscv64
          - linux/ppc64le
          - linux/s390x
          # - linux/386 - no distroless support
          # - linux/mips64le - no distroless support
          # - linux/mips64 - no distroless support
          - linux/arm/v7
          # - linux/arm/v6 - no distroless support
    timeout-minutes: 30
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_REGISTRY }}
            ${{ env.ECR_REGISTRY }}
          tags: type=raw,value=${{ github.sha }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/arm/v7
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.login-ecr.outputs.registry }}
          username: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1
      - name: Build and upload digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.DOCKERHUB_REGISTRY }},push-by-digest=true,name-canonical=true,push=true
          build-args: |
            github_user=${{ secrets.SHIPA_GITHUB_USERNAME }}
            github_token=${{ secrets.SHIPA_GITHUB_TOKEN }}
            release_version=${{ github.head_ref }}
            git_commit=${{ github.sha }}
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.SHIPA_GITHUB_TOKEN }}
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
  merge:
    runs-on: ubuntu-latest
    needs:
      - build-multiplatform
    steps:
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_REGISTRY }}
            ${{ env.ECR_REGISTRY }}
          tags: type=raw,value=${{ github.sha }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.login-ecr.outputs.registry }}
          username: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.DOCKERHUB_REGISTRY }}@sha256:%s ' *)
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.ECR_REGISTRY }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.DOCKERHUB_REGISTRY }}:${{ steps.meta.outputs.version }}
          docker buildx imagetools inspect ${{ env.ECR_REGISTRY }}:${{ steps.meta.outputs.version }}
  security-scan:
    runs-on: ubuntu-latest
    needs:
      - build-single-platform
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@f78e9ecf42a1271402d4f484518b9313235990e1
        with:
          image-ref: ${{ env.DOCKERHUB_REGISTRY }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"
          exit-code: "1"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"
